using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace D5
{
    class Program
    {
        static void Main(string[] args)
        {
            //int[] memory = { 1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50 };
            var p = new[]
            {
                3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 40, 27, 224, 101, -67, 224, 224, 4, 224, 1002,
                223, 8, 223, 1001, 224, 2, 224, 1, 224, 223, 223, 1101, 33, 38, 225, 1102, 84, 60, 225, 1101, 65, 62,
                225, 1002, 36, 13, 224, 1001, 224, -494, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 3, 224, 1, 223, 224,
                223, 1102, 86, 5, 224, 101, -430, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 223, 224,
                223, 1102, 23, 50, 225, 1001, 44, 10, 224, 101, -72, 224, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224,
                224, 1, 224, 223, 223, 102, 47, 217, 224, 1001, 224, -2303, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224,
                224, 1, 223, 224, 223, 1102, 71, 84, 225, 101, 91, 40, 224, 1001, 224, -151, 224, 4, 224, 1002, 223, 8,
                223, 1001, 224, 5, 224, 1, 223, 224, 223, 1101, 87, 91, 225, 1102, 71, 19, 225, 1, 92, 140, 224, 101,
                -134, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 224, 223, 223, 2, 170, 165, 224, 1001,
                224, -1653, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1101, 49, 32, 225, 4,
                223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999,
                1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0,
                99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0,
                105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0,
                1105, 1, 99999, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 329, 101, 1, 223, 223, 8, 226, 226,
                224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 1007, 677, 226, 224, 102, 2, 223, 223, 1005,
                224, 359, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 374, 101, 1, 223, 223, 1107,
                677, 677, 224, 1002, 223, 2, 223, 1005, 224, 389, 1001, 223, 1, 223, 108, 226, 677, 224, 102, 2, 223,
                223, 1005, 224, 404, 1001, 223, 1, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 419, 101, 1,
                223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 434, 101, 1, 223, 223, 108, 226, 226, 224,
                1002, 223, 2, 223, 1006, 224, 449, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224,
                464, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 479, 1001, 223, 1, 223, 1108,
                677, 677, 224, 1002, 223, 2, 223, 1005, 224, 494, 101, 1, 223, 223, 7, 677, 677, 224, 1002, 223, 2, 223,
                1005, 224, 509, 101, 1, 223, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 524, 101, 1, 223,
                223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 539, 101, 1, 223, 223, 1107, 677, 226, 224, 102, 2,
                223, 223, 1006, 224, 554, 101, 1, 223, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 569, 101,
                1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 584, 101, 1, 223, 223, 1108, 677, 226,
                224, 102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1008, 677, 677, 224, 102, 2, 223, 223, 1006,
                224, 614, 101, 1, 223, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 629, 101, 1, 223, 223, 1008,
                226, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 1007, 226, 226, 224, 1002, 223, 2,
                223, 1005, 224, 659, 1001, 223, 1, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 674, 1001,
                223, 1, 223, 4, 223, 99, 226
            };

            var memory = p.ToArray();
            
            var ip = 0;

            int modeP1;
            int modeP2;
            int modeP3;

            int Get(int mode, int index)
            {
                if (mode == 0) return memory[memory[ip + index]];
                if (mode == 1) return memory[ip + index];

                throw new Exception($"HALT: mode {mode} not supported");
            }

            void Set(int mode, int index, int value)
            {
                if (mode == 0)
                {
                    memory[memory[ip + index]] = value;
                    return;
                }
                if (mode == 1)
                {
                    memory[ip + index] = value;
                    return;
                }

                throw new Exception($"HALT: mode {mode} not supported");
            }

            void Add()
            {
                Set(modeP3, 3, Get(modeP1, 1) + Get(modeP2, 2));
                ip += 4;
            }

            void Multiply()
            {
                Set(modeP3, 3, Get(modeP1, 1) * Get(modeP2, 2));
                ip += 4;
            }

            void Input()
            {
                var input = Console.ReadLine();
                if (int.TryParse(input, out var value))
                {
                    Set(modeP1, 1, value); 
                    ip += 2;
                    return;
                }
                throw new ArgumentException($"HALT: input value {input} not a valid integer");
            }

            void Output()
            {
                var value = Get(modeP1, 1); ip += 2;
                Console.WriteLine(value);
            }

            void JumpIfTrue()
            {
                if (Get(modeP1, 1) != 0)
                {
                    ip = Get(modeP2, 2);
                } 
                else
                {
                    ip += 3;
                }
            }

            void JumpIfFalse()
            {
                if (Get(modeP1, 1) == 0)
                {
                    ip = Get(modeP2, 2);
                }
                else
                {
                    ip += 3;
                }
            }

            void IsLessThan()
            {
                Set(modeP3, 3, Get(modeP1, 1) < Get(modeP2, 2) ? 1 : 0);
                ip += 4;
            }

            void IsEqual()
            {
                Set(modeP3, 3, Get(modeP1, 1) == Get(modeP2, 2) ? 1 : 0);
                ip += 4;
            }

            do
            {
                var opCode = memory[ip];
                var operation = opCode % 100;
                var modes = opCode / 100;
                modeP1 = (modes % 10);
                modeP2 = ((modes / 10) % 10);
                modeP3 = ((modes / 100) % 10);

                switch (operation)
                {
                    case 1:
                        Add();
                        break;
                    case 2:
                        Multiply();
                        break;
                    case 3:
                        Input();
                        break;
                    case 4:
                        Output();
                        break;
                    case 5:
                        JumpIfTrue();
                        break;
                    case 6:
                        JumpIfFalse();
                        break;
                    case 7:
                        IsLessThan();
                        break;
                    case 8:
                        IsEqual();
                        break;
                    case 99:
                        Console.ReadKey(); // halt
                        break;
                    default:
                        Console.WriteLine($"HALT: Opcode {operation} not supported");
                        Console.ReadKey(); // halt
                        break;
                }

            } while (true);
        }
    }
}
